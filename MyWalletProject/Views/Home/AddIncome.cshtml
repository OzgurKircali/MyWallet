<link href="~/Content/Homepage.css" rel="stylesheet" />
@model EntityLayer.Concrete.TransactionCategory

<style>
    .buttonIncome {
        border-radius: 10px;
        border-color: green;
        background-color: green;
        border-width: 3px;
        border-style: solid;
        font-family: Coolvetica;
    }
    .buttonIncome:hover {
        background-color: transparent;
        color: darkgreen;
    }
</style>


@using System.Web.UI.WebControls



@Html.DevExpress().Button(settings =>
{

    settings.Name = "PopupIncomeButton";
    settings.Text = "Kazanç Ekle";
    //settings.Styles.Style.BackColor = System.Drawing.Color.Green;
    settings.ControlStyle.CssClass = "buttonIncome";
    settings.UseSubmitBehavior = false;
    settings.ClientSideEvents.Click = "function(s,e) { e.processOnServer=false; AddIncomePopup.Show(); }";
    settings.Width = 255;
    settings.Height = 50;
    settings.ControlStyle.Font.Name = "Coolvetica";
    settings.ControlStyle.Font.Size = 16;



}).GetHtml()





@Html.DevExpress().PopupControl(
    settings =>
    {

        settings.Name = "AddIncomePopup";
        settings.Width = 320;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        //settings.PopupAnimationType = AnimationType.Fade;
        settings.HeaderText = "Kazanç Ekle";
        settings.ControlStyle.Font.Name = "Coolvetica";
        settings.Modal = true;
        settings.AutoUpdatePosition = true;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.Above;
        settings.SetContent(() =>
        {
            using (Html.BeginForm("AddIncome", "Home", FormMethod.Post, new { id = "popupForm", @class = "edit_form" }))
            {
                Html.Hidden("TransactionID");

                @Html.DevExpress().FormLayout(s =>
                {
                    s.Name = "ModalModeFormLayout";
                    s.RequiredMarkDisplayMode = RequiredMarkMode.None;
                    s.Width = Unit.Percentage(100);
                    s.Height = Unit.Percentage(100);
                    


                    s.NestedExtensionWidth = Unit.Percentage(100);
                    s.Items.Add(i =>
                    {
                        i.Name = "Amount";
                        i.FieldName = "TransactionAmount";
                        i.Caption = "Miktar";
                        i.CaptionStyle.Font.Bold = false;
                        i.CaptionStyle.Font.Name = "Coolvetica";
                        
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;
                    });
                    s.Items.Add(i =>
                    {
                        i.Name = "TransactionDate";
                        i.FieldName = "TransactionDate";
                        i.CaptionStyle.Font.Bold = false;
                        i.Caption = "Tarih";
                        i.CaptionStyle.Font.Name = "Coolvetica";
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.DateEdit;


                    });
                    s.Items.Add(i =>
                    {
                        i.Name = "m";
                        i.FieldName = "CategoryID";
                        i.Caption = "Kategori";
                        i.CaptionStyle.Font.Name = "Coolvetica";
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.ComboBox;
                        i.SetNestedContent(() =>
                        {
                            ViewContext.Writer.Write("<div class=\"divWithStandardTextBox\">");
                            ViewContext.Writer.Write(Html.DropDownListFor(m => m.Category, (List<SelectListItem>)ViewBag.Categories, new { @class = "form-control" }));
                            ViewContext.Writer.Write("</div>");
                        });




                    });
                    s.Items.Add(i =>
                    {
                        i.Name = "Description";
                        i.FieldName = "TransactionDescription";
                        i.Caption = "Açıklama";
                        i.CaptionStyle.Font.Bold = false;
                        i.CaptionStyle.Font.Name = "Coolvetica";
                        i.NestedExtensionType = FormLayoutNestedExtensionItemType.TextBox;

                    });
                    s.Items.Add(i =>
                    {
                        i.ShowCaption = DefaultBoolean.False;
                        i.SetNestedContent(() =>
                        {
                            Html.DevExpress().Button(
                                buttonSettings =>
                                {
                                    buttonSettings.Name = "btnUpdate";
                                    buttonSettings.ControlStyle.CssClass = "button";
                                    buttonSettings.Width = 80;
                                    buttonSettings.Text = "Kaydet";
                                    buttonSettings.UseSubmitBehavior = true;
                                }
                            ).Render();

                        });
                    });
                }).Render();
            }
        });

        settings.ClientSideEvents.CloseUp = "function(s, e){ ASPxClientEdit.ClearEditorsInContainer(null, '', true); }";
    }).GetHtml()




